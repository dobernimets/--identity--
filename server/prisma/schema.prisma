datasource postgres {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  apartment                       String?
  city                            String?
  country                         String?
  createdAt                       DateTime         @default(now())
  datarequestsaskid               Datarequest[]    @relation(name: "askid")
  datarequestsreceiveid           Datarequest[]    @relation(name: "datarequestsreceiveid")
  datasuggestionsreceiveid        Datasuggestion[] @relation(name: "datasuggestionsreceiveid")
  datasuggestionssuggestionid     Datasuggestion[] @relation(name: "datasuggestionssuggestionid")
  email                           String?
  firstName                       String?
  groupsownerid                   Group[]
  housnumber                      String?
  id                              String           @id @default(cuid())
  image                           String?
  isactive                        Boolean?
  isblocked                       Enumblockuser?   @relation(fields: [isblockedId], references: [id])
  isblockedId                     String?
  isregistered                    Boolean?
  lastName                        String?
  linksharings                    Linksharing[]
  membergroups                    Membergroup[]
  myidentitiesidentityid          Myidentity[]     @relation(name: "myidentitiesidentityid")
  myidentitiesmyidentitycontactid Myidentity[]     @relation(name: "myidentitiesmyidentitycontactid")
  password                        String
  phone                           String?
  profiles                        Profile[]
  profileviewsidentityid          Profileview[]    @relation(name: "profileviewsidentityid")
  profileviewswatchid             Profileview[]    @relation(name: "profileviewswatchid")
  roles                           String[]
  street                          String?
  updatedAt                       DateTime         @updatedAt
  username                        String           @unique
}

model Template {
  createdAt          DateTime           @default(now())
  groups             Group[]
  id                 String             @id @default(cuid())
  name               String?
  templatecategories Templatecategory[]
  updatedAt          DateTime           @updatedAt
}

model Group {
  createdAt    DateTime      @default(now())
  id           String        @id @default(cuid())
  membergroups Membergroup[]
  namegroup    String?
  ownerid      User?         @relation(fields: [owneridId], references: [id])
  owneridId    String?
  templateid   Template?     @relation(fields: [templateidId], references: [id])
  templateidId String?
  updatedAt    DateTime      @updatedAt
}

model Myidentity {
  createdAt             DateTime @default(now())
  id                    String   @id @default(cuid())
  identityid            User?    @relation(name: "myidentitiesidentityid", fields: [identityidId], references: [id])
  identityidId          String?
  myidentitycontactid   User?    @relation(name: "myidentitiesmyidentitycontactid", fields: [myidentitycontactidId], references: [id])
  myidentitycontactidId String?
  updatedAt             DateTime @updatedAt
}

model Category {
  categoryname       String?
  createdAt          DateTime           @default(now())
  datarequests       Datarequest[]
  datasuggestions    Datasuggestion[]
  fileprofiles       Fileprofile[]
  id                 String             @id @default(cuid())
  linkcategories     Linkcategory[]
  linkprofiles       Linkprofile[]
  profileviews       Profileview[]
  templatecategories Templatecategory[]
  updatedAt          DateTime           @updatedAt
}

model Templatecategory {
  caregoryid   Category? @relation(fields: [caregoryidId], references: [id])
  caregoryidId String?
  createdAt    DateTime  @default(now())
  id           String    @id @default(cuid())
  templateid   Template? @relation(fields: [templateidId], references: [id])
  templateidId String?
  updatedAt    DateTime  @updatedAt
}

model Datasuggestion {
  createdAt              DateTime                  @default(now())
  id                     String                    @id @default(cuid())
  isactivesuggestion     Boolean?
  receiveid              User?                     @relation(name: "datasuggestionsreceiveid", fields: [receiveidId], references: [id])
  receiveidId            String?
  status                 EnumDatasuggestionStatus?
  suggestioncategoryid   Category?                 @relation(fields: [suggestioncategoryidId], references: [id])
  suggestioncategoryidId String?
  suggestionid           User?                     @relation(name: "datasuggestionssuggestionid", fields: [suggestionidId], references: [id])
  suggestionidId         String?
  updatedAt              DateTime                  @updatedAt
}

model Datarequest {
  askid           User?                  @relation(name: "askid", fields: [askidId], references: [id])
  askidId         String?
  createdAt       DateTime               @default(now())
  id              String                 @id @default(cuid())
  isactivereq     Boolean?
  receiveid       User?                  @relation(name: "datarequestsreceiveid", fields: [receiveidId], references: [id])
  receiveidId     String?
  reqcategoryid   Category?              @relation(fields: [reqcategoryidId], references: [id])
  reqcategoryidId String?
  status          EnumDatarequestStatus?
  updatedAt       DateTime               @updatedAt
}

model Profileview {
  createdAt        DateTime  @default(now())
  id               String    @id @default(cuid())
  identityid       User?     @relation(name: "profileviewsidentityid", fields: [identityidId], references: [id])
  identityidId     String?
  updatedAt        DateTime  @updatedAt
  viewcategoryid   Category? @relation(fields: [viewcategoryidId], references: [id])
  viewcategoryidId String?
  watchid          User?     @relation(name: "profileviewswatchid", fields: [watchidId], references: [id])
  watchidId        String?
}

model Profile {
  content      String?
  createdAt    DateTime      @default(now())
  fileprofiles Fileprofile[]
  id           String        @id @default(cuid())
  identityid   User?         @relation(fields: [identityidId], references: [id])
  identityidId String?
  linkprofiles Linkprofile[]
  title        String?
  updatedAt    DateTime      @updatedAt
}

model Linksharing {
  createdAt      DateTime       @default(now())
  expiration     DateTime?
  id             String         @id @default(cuid())
  link           String?
  linkcategories Linkcategory[]
  sharingid      User?          @relation(fields: [sharingidId], references: [id])
  sharingidId    String?
  updatedAt      DateTime       @updatedAt
}

model Linkcategory {
  categoryid   Category?    @relation(fields: [categoryidId], references: [id])
  categoryidId String?
  createdAt    DateTime     @default(now())
  id           String       @id @default(cuid())
  linkid       Linksharing? @relation(fields: [linkidId], references: [id])
  linkidId     String?
  updatedAt    DateTime     @updatedAt
}

model Fileprofile {
  categoryid   Category? @relation(fields: [categoryidId], references: [id])
  categoryidId String?
  createdAt    DateTime  @default(now())
  file         String?
  id           String    @id @default(cuid())
  ispublic     Boolean?
  profileid    Profile?  @relation(fields: [profileidId], references: [id])
  profileidId  String?
  title        String?
  updatedAt    DateTime  @updatedAt
}

model Linkprofile {
  categoryid   Category? @relation(fields: [categoryidId], references: [id])
  categoryidId String?
  createdAt    DateTime  @default(now())
  id           String    @id @default(cuid())
  ispublic     Boolean?
  profileid    Profile?  @relation(fields: [profileidId], references: [id])
  profileidId  String?
  title        String?
  updatedAt    DateTime  @updatedAt
  url          String?
}

model Enumblockuser {
  createdAt   DateTime                      @default(now())
  id          String                        @id @default(cuid())
  statusblock EnumEnumblockuserStatusblock?
  updatedAt   DateTime                      @updatedAt
  users       User[]
}

model Membergroup {
  createdAt  DateTime @default(now())
  groupid    Group?   @relation(fields: [groupidId], references: [id])
  groupidId  String?
  id         String   @id @default(cuid())
  memberid   User?    @relation(fields: [memberidId], references: [id])
  memberidId String?
  updatedAt  DateTime @updatedAt
}

enum EnumDatasuggestionStatus {
  offer
  rejection
  agreement
  cancelation
}

enum EnumDatarequestStatus {
  request
  rejection
  agreement
  cancelation
}

enum EnumEnumblockuserStatusblock {
  block
  frozen
  active
}