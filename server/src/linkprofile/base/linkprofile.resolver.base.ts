/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateLinkprofileArgs } from "./CreateLinkprofileArgs";
import { UpdateLinkprofileArgs } from "./UpdateLinkprofileArgs";
import { DeleteLinkprofileArgs } from "./DeleteLinkprofileArgs";
import { LinkprofileFindManyArgs } from "./LinkprofileFindManyArgs";
import { LinkprofileFindUniqueArgs } from "./LinkprofileFindUniqueArgs";
import { Linkprofile } from "./Linkprofile";
import { Category } from "../../category/base/Category";
import { Profile } from "../../profile/base/Profile";
import { LinkprofileService } from "../linkprofile.service";

@graphql.Resolver(() => Linkprofile)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class LinkprofileResolverBase {
  constructor(
    protected readonly service: LinkprofileService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Linkprofile",
    action: "read",
    possession: "any",
  })
  async _linkprofilesMeta(
    @graphql.Args() args: LinkprofileFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Linkprofile])
  @nestAccessControl.UseRoles({
    resource: "Linkprofile",
    action: "read",
    possession: "any",
  })
  async linkprofiles(
    @graphql.Args() args: LinkprofileFindManyArgs
  ): Promise<Linkprofile[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Linkprofile, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Linkprofile",
    action: "read",
    possession: "own",
  })
  async linkprofile(
    @graphql.Args() args: LinkprofileFindUniqueArgs
  ): Promise<Linkprofile | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Linkprofile)
  @nestAccessControl.UseRoles({
    resource: "Linkprofile",
    action: "create",
    possession: "any",
  })
  async createLinkprofile(
    @graphql.Args() args: CreateLinkprofileArgs
  ): Promise<Linkprofile> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        categoryid: args.data.categoryid
          ? {
              connect: args.data.categoryid,
            }
          : undefined,

        profileid: args.data.profileid
          ? {
              connect: args.data.profileid,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Linkprofile)
  @nestAccessControl.UseRoles({
    resource: "Linkprofile",
    action: "update",
    possession: "any",
  })
  async updateLinkprofile(
    @graphql.Args() args: UpdateLinkprofileArgs
  ): Promise<Linkprofile | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          categoryid: args.data.categoryid
            ? {
                connect: args.data.categoryid,
              }
            : undefined,

          profileid: args.data.profileid
            ? {
                connect: args.data.profileid,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Linkprofile)
  @nestAccessControl.UseRoles({
    resource: "Linkprofile",
    action: "delete",
    possession: "any",
  })
  async deleteLinkprofile(
    @graphql.Args() args: DeleteLinkprofileArgs
  ): Promise<Linkprofile | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Category, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "read",
    possession: "any",
  })
  async categoryid(
    @graphql.Parent() parent: Linkprofile
  ): Promise<Category | null> {
    const result = await this.service.getCategoryid(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Profile, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Profile",
    action: "read",
    possession: "any",
  })
  async profileid(
    @graphql.Parent() parent: Linkprofile
  ): Promise<Profile | null> {
    const result = await this.service.getProfileid(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
