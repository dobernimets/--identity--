/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTemplatecategoryArgs } from "./CreateTemplatecategoryArgs";
import { UpdateTemplatecategoryArgs } from "./UpdateTemplatecategoryArgs";
import { DeleteTemplatecategoryArgs } from "./DeleteTemplatecategoryArgs";
import { TemplatecategoryFindManyArgs } from "./TemplatecategoryFindManyArgs";
import { TemplatecategoryFindUniqueArgs } from "./TemplatecategoryFindUniqueArgs";
import { Templatecategory } from "./Templatecategory";
import { Category } from "../../category/base/Category";
import { Template } from "../../template/base/Template";
import { TemplatecategoryService } from "../templatecategory.service";

@graphql.Resolver(() => Templatecategory)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class TemplatecategoryResolverBase {
  constructor(
    protected readonly service: TemplatecategoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Templatecategory",
    action: "read",
    possession: "any",
  })
  async _templatecategoriesMeta(
    @graphql.Args() args: TemplatecategoryFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Templatecategory])
  @nestAccessControl.UseRoles({
    resource: "Templatecategory",
    action: "read",
    possession: "any",
  })
  async templatecategories(
    @graphql.Args() args: TemplatecategoryFindManyArgs
  ): Promise<Templatecategory[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Templatecategory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Templatecategory",
    action: "read",
    possession: "own",
  })
  async templatecategory(
    @graphql.Args() args: TemplatecategoryFindUniqueArgs
  ): Promise<Templatecategory | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Templatecategory)
  @nestAccessControl.UseRoles({
    resource: "Templatecategory",
    action: "create",
    possession: "any",
  })
  async createTemplatecategory(
    @graphql.Args() args: CreateTemplatecategoryArgs
  ): Promise<Templatecategory> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        caregoryid: args.data.caregoryid
          ? {
              connect: args.data.caregoryid,
            }
          : undefined,

        templateid: args.data.templateid
          ? {
              connect: args.data.templateid,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Templatecategory)
  @nestAccessControl.UseRoles({
    resource: "Templatecategory",
    action: "update",
    possession: "any",
  })
  async updateTemplatecategory(
    @graphql.Args() args: UpdateTemplatecategoryArgs
  ): Promise<Templatecategory | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          caregoryid: args.data.caregoryid
            ? {
                connect: args.data.caregoryid,
              }
            : undefined,

          templateid: args.data.templateid
            ? {
                connect: args.data.templateid,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Templatecategory)
  @nestAccessControl.UseRoles({
    resource: "Templatecategory",
    action: "delete",
    possession: "any",
  })
  async deleteTemplatecategory(
    @graphql.Args() args: DeleteTemplatecategoryArgs
  ): Promise<Templatecategory | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Category, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "read",
    possession: "any",
  })
  async caregoryid(
    @graphql.Parent() parent: Templatecategory
  ): Promise<Category | null> {
    const result = await this.service.getCaregoryid(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Template, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Template",
    action: "read",
    possession: "any",
  })
  async templateid(
    @graphql.Parent() parent: Templatecategory
  ): Promise<Template | null> {
    const result = await this.service.getTemplateid(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
