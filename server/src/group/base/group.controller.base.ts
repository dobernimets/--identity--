/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GroupService } from "../group.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { GroupCreateInput } from "./GroupCreateInput";
import { GroupWhereInput } from "./GroupWhereInput";
import { GroupWhereUniqueInput } from "./GroupWhereUniqueInput";
import { GroupFindManyArgs } from "./GroupFindManyArgs";
import { GroupUpdateInput } from "./GroupUpdateInput";
import { Group } from "./Group";
import { MembergroupFindManyArgs } from "../../membergroup/base/MembergroupFindManyArgs";
import { Membergroup } from "../../membergroup/base/Membergroup";
import { MembergroupWhereUniqueInput } from "../../membergroup/base/MembergroupWhereUniqueInput";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class GroupControllerBase {
  constructor(
    protected readonly service: GroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "create",
    possession: "any",
  })
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Group })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(@common.Body() data: GroupCreateInput): Promise<Group> {
    return await this.service.create({
      data: {
        ...data,

        ownerid: data.ownerid
          ? {
              connect: data.ownerid,
            }
          : undefined,

        templateid: data.templateid
          ? {
              connect: data.templateid,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        namegroup: true,

        ownerid: {
          select: {
            id: true,
          },
        },

        templateid: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [Group] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(GroupFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Group[]> {
    const args = plainToClass(GroupFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        createdAt: true,
        id: true,
        namegroup: true,

        ownerid: {
          select: {
            id: true,
          },
        },

        templateid: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Group })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: GroupWhereUniqueInput
  ): Promise<Group | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        createdAt: true,
        id: true,
        namegroup: true,

        ownerid: {
          select: {
            id: true,
          },
        },

        templateid: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Group })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: GroupWhereUniqueInput,
    @common.Body() data: GroupUpdateInput
  ): Promise<Group | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          ownerid: data.ownerid
            ? {
                connect: data.ownerid,
              }
            : undefined,

          templateid: data.templateid
            ? {
                connect: data.templateid,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          namegroup: true,

          ownerid: {
            select: {
              id: true,
            },
          },

          templateid: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Group })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: GroupWhereUniqueInput
  ): Promise<Group | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          createdAt: true,
          id: true,
          namegroup: true,

          ownerid: {
            select: {
              id: true,
            },
          },

          templateid: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Membergroup",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/membergroups")
  @ApiNestedQuery(MembergroupFindManyArgs)
  async findManyMembergroups(
    @common.Req() request: Request,
    @common.Param() params: GroupWhereUniqueInput
  ): Promise<Membergroup[]> {
    const query = plainToClass(MembergroupFindManyArgs, request.query);
    const results = await this.service.findMembergroups(params.id, {
      ...query,
      select: {
        createdAt: true,

        groupid: {
          select: {
            id: true,
          },
        },

        id: true,

        memberid: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/membergroups")
  async connectMembergroups(
    @common.Param() params: GroupWhereUniqueInput,
    @common.Body() body: MembergroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      membergroups: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/membergroups")
  async updateMembergroups(
    @common.Param() params: GroupWhereUniqueInput,
    @common.Body() body: MembergroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      membergroups: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/membergroups")
  async disconnectMembergroups(
    @common.Param() params: GroupWhereUniqueInput,
    @common.Body() body: MembergroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      membergroups: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
