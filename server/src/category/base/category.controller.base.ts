/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CategoryService } from "../category.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CategoryCreateInput } from "./CategoryCreateInput";
import { CategoryWhereInput } from "./CategoryWhereInput";
import { CategoryWhereUniqueInput } from "./CategoryWhereUniqueInput";
import { CategoryFindManyArgs } from "./CategoryFindManyArgs";
import { CategoryUpdateInput } from "./CategoryUpdateInput";
import { Category } from "./Category";
import { DatarequestFindManyArgs } from "../../datarequest/base/DatarequestFindManyArgs";
import { Datarequest } from "../../datarequest/base/Datarequest";
import { DatarequestWhereUniqueInput } from "../../datarequest/base/DatarequestWhereUniqueInput";
import { DatasuggestionFindManyArgs } from "../../datasuggestion/base/DatasuggestionFindManyArgs";
import { Datasuggestion } from "../../datasuggestion/base/Datasuggestion";
import { DatasuggestionWhereUniqueInput } from "../../datasuggestion/base/DatasuggestionWhereUniqueInput";
import { FileprofileFindManyArgs } from "../../fileprofile/base/FileprofileFindManyArgs";
import { Fileprofile } from "../../fileprofile/base/Fileprofile";
import { FileprofileWhereUniqueInput } from "../../fileprofile/base/FileprofileWhereUniqueInput";
import { LinkcategoryFindManyArgs } from "../../linkcategory/base/LinkcategoryFindManyArgs";
import { Linkcategory } from "../../linkcategory/base/Linkcategory";
import { LinkcategoryWhereUniqueInput } from "../../linkcategory/base/LinkcategoryWhereUniqueInput";
import { LinkprofileFindManyArgs } from "../../linkprofile/base/LinkprofileFindManyArgs";
import { Linkprofile } from "../../linkprofile/base/Linkprofile";
import { LinkprofileWhereUniqueInput } from "../../linkprofile/base/LinkprofileWhereUniqueInput";
import { ProfileviewFindManyArgs } from "../../profileview/base/ProfileviewFindManyArgs";
import { Profileview } from "../../profileview/base/Profileview";
import { ProfileviewWhereUniqueInput } from "../../profileview/base/ProfileviewWhereUniqueInput";
import { TemplatecategoryFindManyArgs } from "../../templatecategory/base/TemplatecategoryFindManyArgs";
import { Templatecategory } from "../../templatecategory/base/Templatecategory";
import { TemplatecategoryWhereUniqueInput } from "../../templatecategory/base/TemplatecategoryWhereUniqueInput";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CategoryControllerBase {
  constructor(
    protected readonly service: CategoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "create",
    possession: "any",
  })
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Category })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(@common.Body() data: CategoryCreateInput): Promise<Category> {
    return await this.service.create({
      data: data,
      select: {
        categoryname: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [Category] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(CategoryFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Category[]> {
    const args = plainToClass(CategoryFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        categoryname: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Category })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: CategoryWhereUniqueInput
  ): Promise<Category | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        categoryname: true,
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Category })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() data: CategoryUpdateInput
  ): Promise<Category | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          categoryname: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Category })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: CategoryWhereUniqueInput
  ): Promise<Category | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          categoryname: true,
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Datarequest",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/datarequests")
  @ApiNestedQuery(DatarequestFindManyArgs)
  async findManyDatarequests(
    @common.Req() request: Request,
    @common.Param() params: CategoryWhereUniqueInput
  ): Promise<Datarequest[]> {
    const query = plainToClass(DatarequestFindManyArgs, request.query);
    const results = await this.service.findDatarequests(params.id, {
      ...query,
      select: {
        askid: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        isactivereq: true,

        receiveid: {
          select: {
            id: true,
          },
        },

        reqcategoryid: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/datarequests")
  async connectDatarequests(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: DatarequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      datarequests: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/datarequests")
  async updateDatarequests(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: DatarequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      datarequests: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/datarequests")
  async disconnectDatarequests(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: DatarequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      datarequests: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Datasuggestion",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/datasuggestions")
  @ApiNestedQuery(DatasuggestionFindManyArgs)
  async findManyDatasuggestions(
    @common.Req() request: Request,
    @common.Param() params: CategoryWhereUniqueInput
  ): Promise<Datasuggestion[]> {
    const query = plainToClass(DatasuggestionFindManyArgs, request.query);
    const results = await this.service.findDatasuggestions(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        isactivesuggestion: true,

        receiveid: {
          select: {
            id: true,
          },
        },

        status: true,

        suggestioncategoryid: {
          select: {
            id: true,
          },
        },

        suggestionid: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/datasuggestions")
  async connectDatasuggestions(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: DatasuggestionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      datasuggestions: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/datasuggestions")
  async updateDatasuggestions(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: DatasuggestionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      datasuggestions: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/datasuggestions")
  async disconnectDatasuggestions(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: DatasuggestionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      datasuggestions: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Fileprofile",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/fileprofiles")
  @ApiNestedQuery(FileprofileFindManyArgs)
  async findManyFileprofiles(
    @common.Req() request: Request,
    @common.Param() params: CategoryWhereUniqueInput
  ): Promise<Fileprofile[]> {
    const query = plainToClass(FileprofileFindManyArgs, request.query);
    const results = await this.service.findFileprofiles(params.id, {
      ...query,
      select: {
        categoryid: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        file: true,
        id: true,
        ispublic: true,

        profileid: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/fileprofiles")
  async connectFileprofiles(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: FileprofileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fileprofiles: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/fileprofiles")
  async updateFileprofiles(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: FileprofileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fileprofiles: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/fileprofiles")
  async disconnectFileprofiles(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: FileprofileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fileprofiles: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Linkcategory",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/linkcategories")
  @ApiNestedQuery(LinkcategoryFindManyArgs)
  async findManyLinkcategories(
    @common.Req() request: Request,
    @common.Param() params: CategoryWhereUniqueInput
  ): Promise<Linkcategory[]> {
    const query = plainToClass(LinkcategoryFindManyArgs, request.query);
    const results = await this.service.findLinkcategories(params.id, {
      ...query,
      select: {
        categoryid: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        linkid: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/linkcategories")
  async connectLinkcategories(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: LinkcategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      linkcategories: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/linkcategories")
  async updateLinkcategories(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: LinkcategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      linkcategories: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/linkcategories")
  async disconnectLinkcategories(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: LinkcategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      linkcategories: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Linkprofile",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/linkprofiles")
  @ApiNestedQuery(LinkprofileFindManyArgs)
  async findManyLinkprofiles(
    @common.Req() request: Request,
    @common.Param() params: CategoryWhereUniqueInput
  ): Promise<Linkprofile[]> {
    const query = plainToClass(LinkprofileFindManyArgs, request.query);
    const results = await this.service.findLinkprofiles(params.id, {
      ...query,
      select: {
        categoryid: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        ispublic: true,

        profileid: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
        url: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/linkprofiles")
  async connectLinkprofiles(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: LinkprofileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      linkprofiles: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/linkprofiles")
  async updateLinkprofiles(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: LinkprofileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      linkprofiles: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/linkprofiles")
  async disconnectLinkprofiles(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: LinkprofileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      linkprofiles: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Profileview",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/profileviews")
  @ApiNestedQuery(ProfileviewFindManyArgs)
  async findManyProfileviews(
    @common.Req() request: Request,
    @common.Param() params: CategoryWhereUniqueInput
  ): Promise<Profileview[]> {
    const query = plainToClass(ProfileviewFindManyArgs, request.query);
    const results = await this.service.findProfileviews(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        identityid: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        viewcategoryid: {
          select: {
            id: true,
          },
        },

        watchid: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/profileviews")
  async connectProfileviews(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: ProfileviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      profileviews: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/profileviews")
  async updateProfileviews(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: ProfileviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      profileviews: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/profileviews")
  async disconnectProfileviews(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: ProfileviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      profileviews: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Templatecategory",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/templatecategories")
  @ApiNestedQuery(TemplatecategoryFindManyArgs)
  async findManyTemplatecategories(
    @common.Req() request: Request,
    @common.Param() params: CategoryWhereUniqueInput
  ): Promise<Templatecategory[]> {
    const query = plainToClass(TemplatecategoryFindManyArgs, request.query);
    const results = await this.service.findTemplatecategories(params.id, {
      ...query,
      select: {
        caregoryid: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        templateid: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/templatecategories")
  async connectTemplatecategories(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: TemplatecategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      templatecategories: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/templatecategories")
  async updateTemplatecategories(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: TemplatecategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      templatecategories: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/templatecategories")
  async disconnectTemplatecategories(
    @common.Param() params: CategoryWhereUniqueInput,
    @common.Body() body: TemplatecategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      templatecategories: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
