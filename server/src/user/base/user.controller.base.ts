/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserService } from "../user.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { UserCreateInput } from "./UserCreateInput";
import { UserWhereInput } from "./UserWhereInput";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserUpdateInput } from "./UserUpdateInput";
import { User } from "./User";
import { DatarequestFindManyArgs } from "../../datarequest/base/DatarequestFindManyArgs";
import { Datarequest } from "../../datarequest/base/Datarequest";
import { DatarequestWhereUniqueInput } from "../../datarequest/base/DatarequestWhereUniqueInput";
import { DatasuggestionFindManyArgs } from "../../datasuggestion/base/DatasuggestionFindManyArgs";
import { Datasuggestion } from "../../datasuggestion/base/Datasuggestion";
import { DatasuggestionWhereUniqueInput } from "../../datasuggestion/base/DatasuggestionWhereUniqueInput";
import { GroupFindManyArgs } from "../../group/base/GroupFindManyArgs";
import { Group } from "../../group/base/Group";
import { GroupWhereUniqueInput } from "../../group/base/GroupWhereUniqueInput";
import { LinksharingFindManyArgs } from "../../linksharing/base/LinksharingFindManyArgs";
import { Linksharing } from "../../linksharing/base/Linksharing";
import { LinksharingWhereUniqueInput } from "../../linksharing/base/LinksharingWhereUniqueInput";
import { MembergroupFindManyArgs } from "../../membergroup/base/MembergroupFindManyArgs";
import { Membergroup } from "../../membergroup/base/Membergroup";
import { MembergroupWhereUniqueInput } from "../../membergroup/base/MembergroupWhereUniqueInput";
import { MyidentityFindManyArgs } from "../../myidentity/base/MyidentityFindManyArgs";
import { Myidentity } from "../../myidentity/base/Myidentity";
import { MyidentityWhereUniqueInput } from "../../myidentity/base/MyidentityWhereUniqueInput";
import { ProfileFindManyArgs } from "../../profile/base/ProfileFindManyArgs";
import { Profile } from "../../profile/base/Profile";
import { ProfileWhereUniqueInput } from "../../profile/base/ProfileWhereUniqueInput";
import { ProfileviewFindManyArgs } from "../../profileview/base/ProfileviewFindManyArgs";
import { Profileview } from "../../profileview/base/Profileview";
import { ProfileviewWhereUniqueInput } from "../../profileview/base/ProfileviewWhereUniqueInput";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class UserControllerBase {
  constructor(
    protected readonly service: UserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "create",
    possession: "any",
  })
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.create({
      data: {
        ...data,

        isblocked: data.isblocked
          ? {
              connect: data.isblocked,
            }
          : undefined,
      },
      select: {
        apartment: true,
        city: true,
        country: true,
        createdAt: true,
        email: true,
        firstName: true,
        housnumber: true,
        id: true,
        image: true,
        isactive: true,

        isblocked: {
          select: {
            id: true,
          },
        },

        isregistered: true,
        lastName: true,
        phone: true,
        roles: true,
        street: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(UserFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        apartment: true,
        city: true,
        country: true,
        createdAt: true,
        email: true,
        firstName: true,
        housnumber: true,
        id: true,
        image: true,
        isactive: true,

        isblocked: {
          select: {
            id: true,
          },
        },

        isregistered: true,
        lastName: true,
        phone: true,
        roles: true,
        street: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        apartment: true,
        city: true,
        country: true,
        createdAt: true,
        email: true,
        firstName: true,
        housnumber: true,
        id: true,
        image: true,
        isactive: true,

        isblocked: {
          select: {
            id: true,
          },
        },

        isregistered: true,
        lastName: true,
        phone: true,
        roles: true,
        street: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          isblocked: data.isblocked
            ? {
                connect: data.isblocked,
              }
            : undefined,
        },
        select: {
          apartment: true,
          city: true,
          country: true,
          createdAt: true,
          email: true,
          firstName: true,
          housnumber: true,
          id: true,
          image: true,
          isactive: true,

          isblocked: {
            select: {
              id: true,
            },
          },

          isregistered: true,
          lastName: true,
          phone: true,
          roles: true,
          street: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          apartment: true,
          city: true,
          country: true,
          createdAt: true,
          email: true,
          firstName: true,
          housnumber: true,
          id: true,
          image: true,
          isactive: true,

          isblocked: {
            select: {
              id: true,
            },
          },

          isregistered: true,
          lastName: true,
          phone: true,
          roles: true,
          street: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Datarequest",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/datarequestsaskid")
  @ApiNestedQuery(DatarequestFindManyArgs)
  async findManyDatarequestsaskid(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Datarequest[]> {
    const query = plainToClass(DatarequestFindManyArgs, request.query);
    const results = await this.service.findDatarequestsaskid(params.id, {
      ...query,
      select: {
        askid: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        isactivereq: true,

        receiveid: {
          select: {
            id: true,
          },
        },

        reqcategoryid: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/datarequestsaskid")
  async connectDatarequestsaskid(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DatarequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      datarequestsaskid: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/datarequestsaskid")
  async updateDatarequestsaskid(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DatarequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      datarequestsaskid: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/datarequestsaskid")
  async disconnectDatarequestsaskid(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DatarequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      datarequestsaskid: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Datarequest",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/datarequestsreceiveid")
  @ApiNestedQuery(DatarequestFindManyArgs)
  async findManyDatarequestsreceiveid(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Datarequest[]> {
    const query = plainToClass(DatarequestFindManyArgs, request.query);
    const results = await this.service.findDatarequestsreceiveid(params.id, {
      ...query,
      select: {
        askid: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        isactivereq: true,

        receiveid: {
          select: {
            id: true,
          },
        },

        reqcategoryid: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/datarequestsreceiveid")
  async connectDatarequestsreceiveid(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DatarequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      datarequestsreceiveid: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/datarequestsreceiveid")
  async updateDatarequestsreceiveid(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DatarequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      datarequestsreceiveid: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/datarequestsreceiveid")
  async disconnectDatarequestsreceiveid(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DatarequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      datarequestsreceiveid: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Datasuggestion",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/datasuggestionsreceiveid")
  @ApiNestedQuery(DatasuggestionFindManyArgs)
  async findManyDatasuggestionsreceiveid(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Datasuggestion[]> {
    const query = plainToClass(DatasuggestionFindManyArgs, request.query);
    const results = await this.service.findDatasuggestionsreceiveid(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        isactivesuggestion: true,

        receiveid: {
          select: {
            id: true,
          },
        },

        status: true,

        suggestioncategoryid: {
          select: {
            id: true,
          },
        },

        suggestionid: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/datasuggestionsreceiveid")
  async connectDatasuggestionsreceiveid(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DatasuggestionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      datasuggestionsreceiveid: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/datasuggestionsreceiveid")
  async updateDatasuggestionsreceiveid(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DatasuggestionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      datasuggestionsreceiveid: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/datasuggestionsreceiveid")
  async disconnectDatasuggestionsreceiveid(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DatasuggestionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      datasuggestionsreceiveid: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Datasuggestion",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/datasuggestionssuggestionid")
  @ApiNestedQuery(DatasuggestionFindManyArgs)
  async findManyDatasuggestionssuggestionid(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Datasuggestion[]> {
    const query = plainToClass(DatasuggestionFindManyArgs, request.query);
    const results = await this.service.findDatasuggestionssuggestionid(
      params.id,
      {
        ...query,
        select: {
          createdAt: true,
          id: true,
          isactivesuggestion: true,

          receiveid: {
            select: {
              id: true,
            },
          },

          status: true,

          suggestioncategoryid: {
            select: {
              id: true,
            },
          },

          suggestionid: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/datasuggestionssuggestionid")
  async connectDatasuggestionssuggestionid(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DatasuggestionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      datasuggestionssuggestionid: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/datasuggestionssuggestionid")
  async updateDatasuggestionssuggestionid(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DatasuggestionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      datasuggestionssuggestionid: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/datasuggestionssuggestionid")
  async disconnectDatasuggestionssuggestionid(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: DatasuggestionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      datasuggestionssuggestionid: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/groupsownerid")
  @ApiNestedQuery(GroupFindManyArgs)
  async findManyGroupsownerid(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Group[]> {
    const query = plainToClass(GroupFindManyArgs, request.query);
    const results = await this.service.findGroupsownerid(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        namegroup: true,

        ownerid: {
          select: {
            id: true,
          },
        },

        templateid: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/groupsownerid")
  async connectGroupsownerid(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: GroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      groupsownerid: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/groupsownerid")
  async updateGroupsownerid(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: GroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      groupsownerid: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/groupsownerid")
  async disconnectGroupsownerid(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: GroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      groupsownerid: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Linksharing",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/linksharings")
  @ApiNestedQuery(LinksharingFindManyArgs)
  async findManyLinksharings(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Linksharing[]> {
    const query = plainToClass(LinksharingFindManyArgs, request.query);
    const results = await this.service.findLinksharings(params.id, {
      ...query,
      select: {
        createdAt: true,
        expiration: true,
        id: true,
        link: true,

        sharingid: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/linksharings")
  async connectLinksharings(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: LinksharingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      linksharings: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/linksharings")
  async updateLinksharings(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: LinksharingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      linksharings: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/linksharings")
  async disconnectLinksharings(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: LinksharingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      linksharings: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Membergroup",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/membergroups")
  @ApiNestedQuery(MembergroupFindManyArgs)
  async findManyMembergroups(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Membergroup[]> {
    const query = plainToClass(MembergroupFindManyArgs, request.query);
    const results = await this.service.findMembergroups(params.id, {
      ...query,
      select: {
        createdAt: true,

        groupid: {
          select: {
            id: true,
          },
        },

        id: true,

        memberid: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/membergroups")
  async connectMembergroups(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: MembergroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      membergroups: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/membergroups")
  async updateMembergroups(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: MembergroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      membergroups: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/membergroups")
  async disconnectMembergroups(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: MembergroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      membergroups: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Myidentity",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/myidentitiesidentityid")
  @ApiNestedQuery(MyidentityFindManyArgs)
  async findManyMyidentitiesidentityid(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Myidentity[]> {
    const query = plainToClass(MyidentityFindManyArgs, request.query);
    const results = await this.service.findMyidentitiesidentityid(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        identityid: {
          select: {
            id: true,
          },
        },

        myidentitycontactid: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/myidentitiesidentityid")
  async connectMyidentitiesidentityid(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: MyidentityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      myidentitiesidentityid: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/myidentitiesidentityid")
  async updateMyidentitiesidentityid(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: MyidentityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      myidentitiesidentityid: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/myidentitiesidentityid")
  async disconnectMyidentitiesidentityid(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: MyidentityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      myidentitiesidentityid: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Myidentity",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/myidentitiesmyidentitycontactid")
  @ApiNestedQuery(MyidentityFindManyArgs)
  async findManyMyidentitiesmyidentitycontactid(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Myidentity[]> {
    const query = plainToClass(MyidentityFindManyArgs, request.query);
    const results = await this.service.findMyidentitiesmyidentitycontactid(
      params.id,
      {
        ...query,
        select: {
          createdAt: true,
          id: true,

          identityid: {
            select: {
              id: true,
            },
          },

          myidentitycontactid: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/myidentitiesmyidentitycontactid")
  async connectMyidentitiesmyidentitycontactid(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: MyidentityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      myidentitiesmyidentitycontactid: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/myidentitiesmyidentitycontactid")
  async updateMyidentitiesmyidentitycontactid(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: MyidentityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      myidentitiesmyidentitycontactid: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/myidentitiesmyidentitycontactid")
  async disconnectMyidentitiesmyidentitycontactid(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: MyidentityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      myidentitiesmyidentitycontactid: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Profile",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/profiles")
  @ApiNestedQuery(ProfileFindManyArgs)
  async findManyProfiles(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Profile[]> {
    const query = plainToClass(ProfileFindManyArgs, request.query);
    const results = await this.service.findProfiles(params.id, {
      ...query,
      select: {
        content: true,
        createdAt: true,
        id: true,

        identityid: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/profiles")
  async connectProfiles(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ProfileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      profiles: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/profiles")
  async updateProfiles(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ProfileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      profiles: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/profiles")
  async disconnectProfiles(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ProfileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      profiles: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Profileview",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/profileviewsidentityid")
  @ApiNestedQuery(ProfileviewFindManyArgs)
  async findManyProfileviewsidentityid(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Profileview[]> {
    const query = plainToClass(ProfileviewFindManyArgs, request.query);
    const results = await this.service.findProfileviewsidentityid(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        identityid: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        viewcategoryid: {
          select: {
            id: true,
          },
        },

        watchid: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/profileviewsidentityid")
  async connectProfileviewsidentityid(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ProfileviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      profileviewsidentityid: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/profileviewsidentityid")
  async updateProfileviewsidentityid(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ProfileviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      profileviewsidentityid: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/profileviewsidentityid")
  async disconnectProfileviewsidentityid(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ProfileviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      profileviewsidentityid: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Profileview",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/profileviewswatchid")
  @ApiNestedQuery(ProfileviewFindManyArgs)
  async findManyProfileviewswatchid(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Profileview[]> {
    const query = plainToClass(ProfileviewFindManyArgs, request.query);
    const results = await this.service.findProfileviewswatchid(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        identityid: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        viewcategoryid: {
          select: {
            id: true,
          },
        },

        watchid: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/profileviewswatchid")
  async connectProfileviewswatchid(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ProfileviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      profileviewswatchid: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/profileviewswatchid")
  async updateProfileviewswatchid(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ProfileviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      profileviewswatchid: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/profileviewswatchid")
  async disconnectProfileviewswatchid(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: ProfileviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      profileviewswatchid: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
