/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMyidentityArgs } from "./CreateMyidentityArgs";
import { UpdateMyidentityArgs } from "./UpdateMyidentityArgs";
import { DeleteMyidentityArgs } from "./DeleteMyidentityArgs";
import { MyidentityFindManyArgs } from "./MyidentityFindManyArgs";
import { MyidentityFindUniqueArgs } from "./MyidentityFindUniqueArgs";
import { Myidentity } from "./Myidentity";
import { User } from "../../user/base/User";
import { MyidentityService } from "../myidentity.service";

@graphql.Resolver(() => Myidentity)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class MyidentityResolverBase {
  constructor(
    protected readonly service: MyidentityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Myidentity",
    action: "read",
    possession: "any",
  })
  async _myidentitiesMeta(
    @graphql.Args() args: MyidentityFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Myidentity])
  @nestAccessControl.UseRoles({
    resource: "Myidentity",
    action: "read",
    possession: "any",
  })
  async myidentities(
    @graphql.Args() args: MyidentityFindManyArgs
  ): Promise<Myidentity[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Myidentity, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Myidentity",
    action: "read",
    possession: "own",
  })
  async myidentity(
    @graphql.Args() args: MyidentityFindUniqueArgs
  ): Promise<Myidentity | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Myidentity)
  @nestAccessControl.UseRoles({
    resource: "Myidentity",
    action: "create",
    possession: "any",
  })
  async createMyidentity(
    @graphql.Args() args: CreateMyidentityArgs
  ): Promise<Myidentity> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        identityid: args.data.identityid
          ? {
              connect: args.data.identityid,
            }
          : undefined,

        myidentitycontactid: args.data.myidentitycontactid
          ? {
              connect: args.data.myidentitycontactid,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Myidentity)
  @nestAccessControl.UseRoles({
    resource: "Myidentity",
    action: "update",
    possession: "any",
  })
  async updateMyidentity(
    @graphql.Args() args: UpdateMyidentityArgs
  ): Promise<Myidentity | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          identityid: args.data.identityid
            ? {
                connect: args.data.identityid,
              }
            : undefined,

          myidentitycontactid: args.data.myidentitycontactid
            ? {
                connect: args.data.myidentitycontactid,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Myidentity)
  @nestAccessControl.UseRoles({
    resource: "Myidentity",
    action: "delete",
    possession: "any",
  })
  async deleteMyidentity(
    @graphql.Args() args: DeleteMyidentityArgs
  ): Promise<Myidentity | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async identityid(@graphql.Parent() parent: Myidentity): Promise<User | null> {
    const result = await this.service.getIdentityid(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async myidentitycontactid(
    @graphql.Parent() parent: Myidentity
  ): Promise<User | null> {
    const result = await this.service.getMyidentitycontactid(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
