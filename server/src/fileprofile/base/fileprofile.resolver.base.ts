/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateFileprofileArgs } from "./CreateFileprofileArgs";
import { UpdateFileprofileArgs } from "./UpdateFileprofileArgs";
import { DeleteFileprofileArgs } from "./DeleteFileprofileArgs";
import { FileprofileFindManyArgs } from "./FileprofileFindManyArgs";
import { FileprofileFindUniqueArgs } from "./FileprofileFindUniqueArgs";
import { Fileprofile } from "./Fileprofile";
import { Category } from "../../category/base/Category";
import { Profile } from "../../profile/base/Profile";
import { FileprofileService } from "../fileprofile.service";

@graphql.Resolver(() => Fileprofile)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class FileprofileResolverBase {
  constructor(
    protected readonly service: FileprofileService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Fileprofile",
    action: "read",
    possession: "any",
  })
  async _fileprofilesMeta(
    @graphql.Args() args: FileprofileFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Fileprofile])
  @nestAccessControl.UseRoles({
    resource: "Fileprofile",
    action: "read",
    possession: "any",
  })
  async fileprofiles(
    @graphql.Args() args: FileprofileFindManyArgs
  ): Promise<Fileprofile[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Fileprofile, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Fileprofile",
    action: "read",
    possession: "own",
  })
  async fileprofile(
    @graphql.Args() args: FileprofileFindUniqueArgs
  ): Promise<Fileprofile | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Fileprofile)
  @nestAccessControl.UseRoles({
    resource: "Fileprofile",
    action: "create",
    possession: "any",
  })
  async createFileprofile(
    @graphql.Args() args: CreateFileprofileArgs
  ): Promise<Fileprofile> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        categoryid: args.data.categoryid
          ? {
              connect: args.data.categoryid,
            }
          : undefined,

        profileid: args.data.profileid
          ? {
              connect: args.data.profileid,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Fileprofile)
  @nestAccessControl.UseRoles({
    resource: "Fileprofile",
    action: "update",
    possession: "any",
  })
  async updateFileprofile(
    @graphql.Args() args: UpdateFileprofileArgs
  ): Promise<Fileprofile | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          categoryid: args.data.categoryid
            ? {
                connect: args.data.categoryid,
              }
            : undefined,

          profileid: args.data.profileid
            ? {
                connect: args.data.profileid,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Fileprofile)
  @nestAccessControl.UseRoles({
    resource: "Fileprofile",
    action: "delete",
    possession: "any",
  })
  async deleteFileprofile(
    @graphql.Args() args: DeleteFileprofileArgs
  ): Promise<Fileprofile | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Category, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "read",
    possession: "any",
  })
  async categoryid(
    @graphql.Parent() parent: Fileprofile
  ): Promise<Category | null> {
    const result = await this.service.getCategoryid(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Profile, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Profile",
    action: "read",
    possession: "any",
  })
  async profileid(
    @graphql.Parent() parent: Fileprofile
  ): Promise<Profile | null> {
    const result = await this.service.getProfileid(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
