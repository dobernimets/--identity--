/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDatasuggestionArgs } from "./CreateDatasuggestionArgs";
import { UpdateDatasuggestionArgs } from "./UpdateDatasuggestionArgs";
import { DeleteDatasuggestionArgs } from "./DeleteDatasuggestionArgs";
import { DatasuggestionFindManyArgs } from "./DatasuggestionFindManyArgs";
import { DatasuggestionFindUniqueArgs } from "./DatasuggestionFindUniqueArgs";
import { Datasuggestion } from "./Datasuggestion";
import { User } from "../../user/base/User";
import { Category } from "../../category/base/Category";
import { DatasuggestionService } from "../datasuggestion.service";

@graphql.Resolver(() => Datasuggestion)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class DatasuggestionResolverBase {
  constructor(
    protected readonly service: DatasuggestionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Datasuggestion",
    action: "read",
    possession: "any",
  })
  async _datasuggestionsMeta(
    @graphql.Args() args: DatasuggestionFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Datasuggestion])
  @nestAccessControl.UseRoles({
    resource: "Datasuggestion",
    action: "read",
    possession: "any",
  })
  async datasuggestions(
    @graphql.Args() args: DatasuggestionFindManyArgs
  ): Promise<Datasuggestion[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Datasuggestion, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Datasuggestion",
    action: "read",
    possession: "own",
  })
  async datasuggestion(
    @graphql.Args() args: DatasuggestionFindUniqueArgs
  ): Promise<Datasuggestion | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Datasuggestion)
  @nestAccessControl.UseRoles({
    resource: "Datasuggestion",
    action: "create",
    possession: "any",
  })
  async createDatasuggestion(
    @graphql.Args() args: CreateDatasuggestionArgs
  ): Promise<Datasuggestion> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        receiveid: args.data.receiveid
          ? {
              connect: args.data.receiveid,
            }
          : undefined,

        suggestioncategoryid: args.data.suggestioncategoryid
          ? {
              connect: args.data.suggestioncategoryid,
            }
          : undefined,

        suggestionid: args.data.suggestionid
          ? {
              connect: args.data.suggestionid,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Datasuggestion)
  @nestAccessControl.UseRoles({
    resource: "Datasuggestion",
    action: "update",
    possession: "any",
  })
  async updateDatasuggestion(
    @graphql.Args() args: UpdateDatasuggestionArgs
  ): Promise<Datasuggestion | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          receiveid: args.data.receiveid
            ? {
                connect: args.data.receiveid,
              }
            : undefined,

          suggestioncategoryid: args.data.suggestioncategoryid
            ? {
                connect: args.data.suggestioncategoryid,
              }
            : undefined,

          suggestionid: args.data.suggestionid
            ? {
                connect: args.data.suggestionid,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Datasuggestion)
  @nestAccessControl.UseRoles({
    resource: "Datasuggestion",
    action: "delete",
    possession: "any",
  })
  async deleteDatasuggestion(
    @graphql.Args() args: DeleteDatasuggestionArgs
  ): Promise<Datasuggestion | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async receiveid(
    @graphql.Parent() parent: Datasuggestion
  ): Promise<User | null> {
    const result = await this.service.getReceiveid(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Category, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "read",
    possession: "any",
  })
  async suggestioncategoryid(
    @graphql.Parent() parent: Datasuggestion
  ): Promise<Category | null> {
    const result = await this.service.getSuggestioncategoryid(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async suggestionid(
    @graphql.Parent() parent: Datasuggestion
  ): Promise<User | null> {
    const result = await this.service.getSuggestionid(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
