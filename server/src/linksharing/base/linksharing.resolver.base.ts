/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateLinksharingArgs } from "./CreateLinksharingArgs";
import { UpdateLinksharingArgs } from "./UpdateLinksharingArgs";
import { DeleteLinksharingArgs } from "./DeleteLinksharingArgs";
import { LinksharingFindManyArgs } from "./LinksharingFindManyArgs";
import { LinksharingFindUniqueArgs } from "./LinksharingFindUniqueArgs";
import { Linksharing } from "./Linksharing";
import { LinkcategoryFindManyArgs } from "../../linkcategory/base/LinkcategoryFindManyArgs";
import { Linkcategory } from "../../linkcategory/base/Linkcategory";
import { User } from "../../user/base/User";
import { LinksharingService } from "../linksharing.service";

@graphql.Resolver(() => Linksharing)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class LinksharingResolverBase {
  constructor(
    protected readonly service: LinksharingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Linksharing",
    action: "read",
    possession: "any",
  })
  async _linksharingsMeta(
    @graphql.Args() args: LinksharingFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Linksharing])
  @nestAccessControl.UseRoles({
    resource: "Linksharing",
    action: "read",
    possession: "any",
  })
  async linksharings(
    @graphql.Args() args: LinksharingFindManyArgs
  ): Promise<Linksharing[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Linksharing, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Linksharing",
    action: "read",
    possession: "own",
  })
  async linksharing(
    @graphql.Args() args: LinksharingFindUniqueArgs
  ): Promise<Linksharing | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Linksharing)
  @nestAccessControl.UseRoles({
    resource: "Linksharing",
    action: "create",
    possession: "any",
  })
  async createLinksharing(
    @graphql.Args() args: CreateLinksharingArgs
  ): Promise<Linksharing> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        sharingid: args.data.sharingid
          ? {
              connect: args.data.sharingid,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Linksharing)
  @nestAccessControl.UseRoles({
    resource: "Linksharing",
    action: "update",
    possession: "any",
  })
  async updateLinksharing(
    @graphql.Args() args: UpdateLinksharingArgs
  ): Promise<Linksharing | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          sharingid: args.data.sharingid
            ? {
                connect: args.data.sharingid,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Linksharing)
  @nestAccessControl.UseRoles({
    resource: "Linksharing",
    action: "delete",
    possession: "any",
  })
  async deleteLinksharing(
    @graphql.Args() args: DeleteLinksharingArgs
  ): Promise<Linksharing | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Linkcategory])
  @nestAccessControl.UseRoles({
    resource: "Linkcategory",
    action: "read",
    possession: "any",
  })
  async linkcategories(
    @graphql.Parent() parent: Linksharing,
    @graphql.Args() args: LinkcategoryFindManyArgs
  ): Promise<Linkcategory[]> {
    const results = await this.service.findLinkcategories(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async sharingid(@graphql.Parent() parent: Linksharing): Promise<User | null> {
    const result = await this.service.getSharingid(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
