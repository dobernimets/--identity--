/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateEnumblockuserArgs } from "./CreateEnumblockuserArgs";
import { UpdateEnumblockuserArgs } from "./UpdateEnumblockuserArgs";
import { DeleteEnumblockuserArgs } from "./DeleteEnumblockuserArgs";
import { EnumblockuserFindManyArgs } from "./EnumblockuserFindManyArgs";
import { EnumblockuserFindUniqueArgs } from "./EnumblockuserFindUniqueArgs";
import { Enumblockuser } from "./Enumblockuser";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { EnumblockuserService } from "../enumblockuser.service";

@graphql.Resolver(() => Enumblockuser)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class EnumblockuserResolverBase {
  constructor(
    protected readonly service: EnumblockuserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Enumblockuser",
    action: "read",
    possession: "any",
  })
  async _enumblockusersMeta(
    @graphql.Args() args: EnumblockuserFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Enumblockuser])
  @nestAccessControl.UseRoles({
    resource: "Enumblockuser",
    action: "read",
    possession: "any",
  })
  async enumblockusers(
    @graphql.Args() args: EnumblockuserFindManyArgs
  ): Promise<Enumblockuser[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Enumblockuser, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Enumblockuser",
    action: "read",
    possession: "own",
  })
  async enumblockuser(
    @graphql.Args() args: EnumblockuserFindUniqueArgs
  ): Promise<Enumblockuser | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Enumblockuser)
  @nestAccessControl.UseRoles({
    resource: "Enumblockuser",
    action: "create",
    possession: "any",
  })
  async createEnumblockuser(
    @graphql.Args() args: CreateEnumblockuserArgs
  ): Promise<Enumblockuser> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Enumblockuser)
  @nestAccessControl.UseRoles({
    resource: "Enumblockuser",
    action: "update",
    possession: "any",
  })
  async updateEnumblockuser(
    @graphql.Args() args: UpdateEnumblockuserArgs
  ): Promise<Enumblockuser | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Enumblockuser)
  @nestAccessControl.UseRoles({
    resource: "Enumblockuser",
    action: "delete",
    possession: "any",
  })
  async deleteEnumblockuser(
    @graphql.Args() args: DeleteEnumblockuserArgs
  ): Promise<Enumblockuser | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User])
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async users(
    @graphql.Parent() parent: Enumblockuser,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUsers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
