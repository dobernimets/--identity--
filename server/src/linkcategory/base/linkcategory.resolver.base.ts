/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateLinkcategoryArgs } from "./CreateLinkcategoryArgs";
import { UpdateLinkcategoryArgs } from "./UpdateLinkcategoryArgs";
import { DeleteLinkcategoryArgs } from "./DeleteLinkcategoryArgs";
import { LinkcategoryFindManyArgs } from "./LinkcategoryFindManyArgs";
import { LinkcategoryFindUniqueArgs } from "./LinkcategoryFindUniqueArgs";
import { Linkcategory } from "./Linkcategory";
import { Category } from "../../category/base/Category";
import { Linksharing } from "../../linksharing/base/Linksharing";
import { LinkcategoryService } from "../linkcategory.service";

@graphql.Resolver(() => Linkcategory)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class LinkcategoryResolverBase {
  constructor(
    protected readonly service: LinkcategoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Linkcategory",
    action: "read",
    possession: "any",
  })
  async _linkcategoriesMeta(
    @graphql.Args() args: LinkcategoryFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Linkcategory])
  @nestAccessControl.UseRoles({
    resource: "Linkcategory",
    action: "read",
    possession: "any",
  })
  async linkcategories(
    @graphql.Args() args: LinkcategoryFindManyArgs
  ): Promise<Linkcategory[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Linkcategory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Linkcategory",
    action: "read",
    possession: "own",
  })
  async linkcategory(
    @graphql.Args() args: LinkcategoryFindUniqueArgs
  ): Promise<Linkcategory | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Linkcategory)
  @nestAccessControl.UseRoles({
    resource: "Linkcategory",
    action: "create",
    possession: "any",
  })
  async createLinkcategory(
    @graphql.Args() args: CreateLinkcategoryArgs
  ): Promise<Linkcategory> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        categoryid: args.data.categoryid
          ? {
              connect: args.data.categoryid,
            }
          : undefined,

        linkid: args.data.linkid
          ? {
              connect: args.data.linkid,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Linkcategory)
  @nestAccessControl.UseRoles({
    resource: "Linkcategory",
    action: "update",
    possession: "any",
  })
  async updateLinkcategory(
    @graphql.Args() args: UpdateLinkcategoryArgs
  ): Promise<Linkcategory | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          categoryid: args.data.categoryid
            ? {
                connect: args.data.categoryid,
              }
            : undefined,

          linkid: args.data.linkid
            ? {
                connect: args.data.linkid,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Linkcategory)
  @nestAccessControl.UseRoles({
    resource: "Linkcategory",
    action: "delete",
    possession: "any",
  })
  async deleteLinkcategory(
    @graphql.Args() args: DeleteLinkcategoryArgs
  ): Promise<Linkcategory | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Category, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "read",
    possession: "any",
  })
  async categoryid(
    @graphql.Parent() parent: Linkcategory
  ): Promise<Category | null> {
    const result = await this.service.getCategoryid(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Linksharing, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Linksharing",
    action: "read",
    possession: "any",
  })
  async linkid(
    @graphql.Parent() parent: Linkcategory
  ): Promise<Linksharing | null> {
    const result = await this.service.getLinkid(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
